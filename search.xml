<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>[dp+bitset]数的种类</title>
    <url>/2024/11/30/dp-bitset-%E6%95%B0%E7%9A%84%E7%A7%8D%E7%B1%BB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="题目大意">题目大意</h2>
<p>给定$n(n\le5\times10^{3})$个整数，问由这些整数通过“加法”操作，可以组成多少种数字？<br>
其中，对于每个数$a_i$,$1\le a_{i}\le100$</p>
<h2 id="初步思路">初步思路</h2>
<p>首先，暴力<code>dfs</code>肯定是不能通过的，我们可以考虑用存在性dp来解决。</p>
<blockquote>
<p>存在性dp，即我们只需考虑这个状态是否能够实现，即用0/1来代替。</p>
</blockquote>
<p>先考虑最基本的，我们假设$dp[i][j]$为到第$a_i$个数位置能否组成$j$。然后考虑转移方程，首先$dp[i-1][j]$为$1$的情况那么$dp[i][j]$肯定能达到，在当前基础上$j+a_i$的数值也能达到。</p>
<p>例如:$i-1$之前可以组成$1,2,3$,$a_i=2$，则对于$i$之前，$3,4,5$一定也可以达到。因此，我们借助倒推回去的思想可以得到状态转移方程:<br>
$$dp[i][j]=(dp[i-1][j-a_i]|dp[i][j])$$<br>
之所以要用或运算，是因为这两个状态只要其中一个为$1$就可以了，而或运算则正好适用于这个情况。<br>
而这时候的空间复杂度为$5\times10^{3}\times5\times10^{3}\times100$，显然是过不了的</p>
<h2 id="进一步思考">进一步思考</h2>
<p>对于到$a_i$这一维度，其实是可以直接省掉的，以此来节省空间，但是对于时间复杂度来说，依然是过不了的。接下来，我们就可以用到$\texttt{bitset}$这个东西了。<br>
$\texttt{bitset}$可以当作有很多二进制的集合，只支持位运算，而不支持加减乘除，支持随机访问。</p>
<h3 id="texttt-bitset-常用函数">$\texttt{bitset}$常用函数</h3>
<ol>
<li><code>.count()</code>统计1的数量</li>
<li><code>.reset()</code>全部重置为0<br>
以上的时间复杂度均为$O(n)$</li>
</ol>
<h3 id="解题">解题</h3>
<p>假设从左到右分别代表$…,3,2,1,0$能否组成，当前状态$\texttt{s}$为$11$,$a_i=1$,只需要将当前状态先左移1位变成$110$,再或起来变成$111$即代表能组成$2,1,0$($\texttt{Tips:}$从右往左为低位到高位)。显然达到了我们的需求，假如$a_i=5$,只需要左移5位再或起来即可。<br>
因此，我们可以得到转移方程:<br>
$$dp=dp|(dp&lt;&lt;a_i)$$<br>
其中$\texttt{dp}$用$\texttt{bitset}$表示,故代码如下:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e3</span> + <span class="number">5</span>,M = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,a[N];</span><br><span class="line">bitset&lt;M&gt; bs;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)cin &gt;&gt; a[i];</span><br><span class="line">    bs[<span class="number">0</span>] = <span class="number">1</span>; <span class="comment">//初始化代表可以表示0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        bs |= (bs &lt;&lt; a[i]);<span class="comment">//状态转移</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; bs.<span class="built_in">count</span>();<span class="comment">//统计1的个数即为答案</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>dp</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>搜索专题</title>
    <url>/2024/11/15/%E6%90%9C%E7%B4%A2%E4%B8%93%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1>搜索</h1>
<p>搜索，常常适用于当我们想不出题目正解时所采取所谓的<s>骗分</s>方法，因为题目很大部分搜索是会过不了$100\%$样例的,但是由于搜索的思维简单和暴力性，我们往往可以较为轻松的骗到很大一部分分数。</p>
<h2 id="dfs-深度优先搜索">dfs(深度优先搜索)</h2>
<blockquote>
<p>DFS 全称是 Depth First Search，中文名是深度优先搜索，是一种用于遍历或搜索树或图的算法。所谓深度优先，就是说每次都尝试向更深的节点走。<br>
该算法讲解时常常与 BFS 并列，但两者除了都能遍历图的连通块以外，用途完全不同，很少有能混用两种算法的情况。<br>
DFS 常常用来指代用递归函数实现的搜索，但实际上两者并不一样。</p>
</blockquote>
<p>顾名思义，深度优先搜索就是要我们一层一层的去遍历访问，进行决策直到达到临界条件。<br>
dfs代码和递归类似，但是其思想不一样</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">#模板</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x == 临界条件)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(条件)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">dfs</span>(x + <span class="number">1</span>);<span class="comment">//下一步</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>例题:<a href="https://www.luogu.com.cn/problem/P1706">[luoguP1706]全排列问题</a></strong><br>
思路:从第一个位开始讨论遍历,对于每一位，for循环探讨每一个数字，如果这个数字没被之前几位用过那么我们就将他作为这一位的答案</p>
<div class="note info simple"><p>info 注意，这里需要用到回溯的思想，即这一种情况全部讨论完当需要讨论下一种情况时，需将当前标记过的状态还原，代码实现也非常简单。</p>
</div>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">#参考代码</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,vis[<span class="number">11</span>],ans[<span class="number">11</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(k&gt;n)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,ans[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		cout&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(vis[i]==<span class="number">0</span>)&#123;</span><br><span class="line">			vis[i]=<span class="number">1</span>; <span class="comment">//标记已经用过</span></span><br><span class="line">			ans[k]=i; <span class="comment">//加入答案</span></span><br><span class="line">			<span class="built_in">dfs</span>(k<span class="number">+1</span>); <span class="comment">//遍历下一位</span></span><br><span class="line">			vis[i]=<span class="number">0</span>; <span class="comment">//回溯思想</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>); <span class="comment">//遍历第一位</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>练习题</strong>:<a href="https://www.luogu.com.cn/problem/P1219">[luoguP1219]八皇后</a> -&gt; 也是dfs加回溯的思想</p>
]]></content>
      <categories>
        <category>专题</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>【Codeforces 312 div2 A】Lala Land and Apple Trees</title>
    <url>/2024/11/14/%E3%80%90Codeforces-312-div2-A%E3%80%91Lala-Land-and-Apple-Trees/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1><a href="https://www.luogu.com.cn/problem/CF558A">【Codeforces #312 div2 A】Lala Land and Apple Trees</a></h1>
<hr>
<p>首先，此题的大意是在一条坐标轴上，有$n$个点，每个点的权值为$a_{i}$,第一次从原点开始走，方向自选(&lt;- or -&gt;)，在过程中，若遇到一个权值&gt;0的点，则将此权值计入答案，并归零。当次、此方向上的所有点均为0后，输出此时的答案。<br>
然后，进行分析:<br>
我们很容易想到这是一个<strong>贪心</strong>，我们将正的和负的分别存入两个数组，最初的方向为: $zhengsum &gt; fusum ? zheng : fu$即正负两边那边权值 &gt; 0的点多就先往哪个方向走，然后，就成模拟题了……<br>
<em>Code</em>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">100001</span>;</span><br><span class="line"><span class="type">int</span> n,dir,l[M],r[M],lsum,rsum,ans;</span><br><span class="line"><span class="type">int</span> markjia[M] = &#123;<span class="number">0</span>&#125;,markjian[M] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">check</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dir == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100000</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(markjian[i])<span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100000</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(markjia[i])<span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="type">int</span> x,a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;x,&amp;a);</span><br><span class="line">        <span class="keyword">if</span>(x &lt; <span class="number">0</span>)&#123;x *= <span class="number">-1</span>;l[x] = a,markjian[x] = <span class="number">1</span>,lsum++;&#125;</span><br><span class="line">        <span class="keyword">else</span> r[x] = a,markjia[x] = <span class="number">1</span>,rsum++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(lsum &gt;= rsum)dir = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> dir = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>() == <span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(dir == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans += l[<span class="built_in">check</span>()];</span><br><span class="line">            markjian[<span class="built_in">check</span>()] = <span class="number">0</span>;</span><br><span class="line">            dir = <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            ans += r[<span class="built_in">check</span>()];</span><br><span class="line">            markjia[<span class="built_in">check</span>()] = <span class="number">0</span>;</span><br><span class="line">            dir = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>$End.$</p>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Toolbar+DrawerLayout+BottomNavigationView的使用</title>
    <url>/2025/02/10/Toolbar-DrawerLayout-BottomNavigationView%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Toolbar">Toolbar</h2>
<p>Toolbar相比于自带的标题栏，能有更多的扩展性，更为灵活。</p>
<p>现在<code>res/themes/themes.xml</code>中，把自带的标题栏关闭掉:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;Theme.MaterialDemo&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;Theme.MaterialComponents.Light.NoActionBar&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后在activity_main.xml里面设置布局:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.coordinatorlayout.widget.CoordinatorLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/main&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.view.activity.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">androidx.appcompat.widget.Toolbar</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/toolbar&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;?attr/actionBarSize&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;?attr/colorPrimary&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:theme</span>=<span class="string">&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:popupTheme</span>=<span class="string">&quot;@style/ThemeOverlay.AppCompat.Light&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_scrollFlags</span>=<span class="string">&quot;scroll|enterAlways|snap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">androidx.appcompat.widget.Toolbar</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">&quot;@layout/drawer_layout&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.coordinatorlayout.widget.CoordinatorLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中<code>coordinatorlayout</code>相当于一个加强版的FrameLayout，<code>&lt;include layout=&quot;@layout/drawer_layout&quot;/&gt;</code>是在下面引入我们的一个drawerLayout的布局，使用<code>&lt;include layout=&quot;&quot;/&gt;可以直接引入布局并且可以直接绑定控件</code>。</p>
<p>然后在<code>MainActivity.kt</code>中:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> toolbar: Toolbar = findViewById(R.id.toolbar)</span><br><span class="line">toolbar.title = <span class="string">&quot;玩Android&quot;</span> <span class="comment">//设置吧toolbar的标题</span></span><br><span class="line">toolbar.setTitleTextColor(Color.WHITE) <span class="comment">//设置标题字体颜色</span></span><br><span class="line">setSupportActionBar(toolbar) <span class="comment">//加载toolbar</span></span><br></pre></td></tr></table></figure>
<p>就完成了对toolbar的设置。</p>
<h2 id="DrawerLayout-NavigationView">DrawerLayout+NavigationView</h2>
<p><code>DrawerLayout</code>本身就是一种抽屉式布局，我们通常会搭配着<code>NavigationBottom</code>使用，然后抽屉栏里面的布局可以用<code>NavigationView</code>这个自带的布局，可以很容易实现头像加列表的形式，效果如下:</p>
<p><img src="https://s3.bmp.ovh/imgs/2025/02/10/8a4a496525517f7f.png" alt=""></p>
<p><code>drawer_layout.xml</code>布局如下:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.drawerlayout.widget.DrawerLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/drawerLayout&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 这里是DrawerLayout外面的布局，即主页面 --&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">&quot;@layout/homepage&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 下面的就是DrawerLayout里面的布局 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.google.android.material.navigation.NavigationView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/nav_view&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;start&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fitsSystemWindows</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:headerLayout</span>=<span class="string">&quot;@layout/nav_header_main&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:menu</span>=<span class="string">&quot;@menu/activity_main_drawer&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.drawerlayout.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面代码中<code>android:layout_gravity=&quot;start&quot;</code>这一行是必须指定的，且要与<code>DrawerLayout</code>的打开方式一样</p>
<p>其中列表使用的是menu资源，<code>activity_main_drawer.xml</code>内容如下:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:showIn</span>=<span class="string">&quot;navigation_view&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">group</span> <span class="attr">android:checkableBehavior</span>=<span class="string">&quot;single&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/nav_about&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:icon</span>=<span class="string">&quot;@drawable/ic_about&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">&quot;关于&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>MainActivity.kt</code>里面的设置:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">setNavigationColumn</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> drawerLayout: DrawerLayout = findViewById(R.id.drawerLayout)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//对toolbar的设置</span></span><br><span class="line">    <span class="keyword">val</span> toolbar: Toolbar = findViewById(R.id.toolbar)</span><br><span class="line">    toolbar.title = <span class="string">&quot;玩Android&quot;</span></span><br><span class="line">    toolbar.setTitleTextColor(Color.WHITE)</span><br><span class="line">    setSupportActionBar(toolbar)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//加载打开抽屉栏的按钮</span></span><br><span class="line">    supportActionBar?.let &#123;</span><br><span class="line">        it.setDisplayHomeAsUpEnabled(<span class="literal">true</span>) <span class="comment">//按钮可以让用户返回到上一级的活动或片段</span></span><br><span class="line">        it.setHomeAsUpIndicator(R.drawable.ic_menu) <span class="comment">//将返回按钮设置成菜单图标</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//关闭抽屉栏</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">closeDrawer</span><span class="params">()</span></span> &#123;</span><br><span class="line">        drawerLayout.closeDrawer(findViewById(R.id.nav_view))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对抽屉栏里面的列表进行点击监听</span></span><br><span class="line">    findViewById&lt;NavigationView&gt;(R.id.nav_view).setNavigationItemSelectedListener &#123; menuItem -&gt;</span><br><span class="line">        <span class="keyword">when</span> (menuItem.itemId) &#123;</span><br><span class="line"></span><br><span class="line">            R.id.nav_about -&gt; &#123;</span><br><span class="line">                <span class="keyword">val</span> intent = Intent(<span class="keyword">this</span>, AboutActivity::<span class="keyword">class</span>.java)</span><br><span class="line">                startActivity(intent)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        closeDrawer()</span><br><span class="line">        <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//添加对DrawerLayout的监听，使得在打开与关闭时toolbar能切换不同的图标</span></span><br><span class="line">    toggle = <span class="keyword">object</span> :</span><br><span class="line">        ActionBarDrawerToggle(<span class="keyword">this</span>, drawerLayout, R.string.app_name, R.string.app_name) &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDrawerClosed</span><span class="params">(drawerView: <span class="type">View</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.onDrawerClosed(drawerView)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDrawerOpened</span><span class="params">(drawerView: <span class="type">View</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.onDrawerOpened(drawerView)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    toggle.syncState() <span class="comment">//同步toolbar和DrawerLayout的状态</span></span><br><span class="line">    drawerLayout.addDrawerListener(toggle)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="BottomNavigationView-ViewPager2">BottomNavigationView+ViewPager2</h2>
<p>而homepage页面我们则采用<code>BottomNavigationView+ViewPager2</code>的形式。</p>
<p><code>homepage.xml</code>:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.google.android.material.bottomnavigation.BottomNavigationView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/homepage_navigation_bottom&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:itemTextColor</span>=<span class="string">&quot;@color/nav_bottom_text_select&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:labelVisibilityMode</span>=<span class="string">&quot;labeled&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:menu</span>=<span class="string">&quot;@menu/menu_bottom&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.viewpager2.widget.ViewPager2</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/bottom_navigation_viewpage2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toTopOf</span>=<span class="string">&quot;@+id/homepage_navigation_bottom&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">&quot;1.0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintVertical_bias</span>=<span class="string">&quot;0.0&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面的<code>@menu/menu_bottom</code>也是菜单资源文件，加载了底部导航按钮:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/bottom_home&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;@drawable/bottom_home&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">&quot;首页&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/bottom_public&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;@drawable/bottom_public&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">&quot;公众号&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/bottom_navigation&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;@drawable/bottom_navigation&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">&quot;导航&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>ViewPager2的Adapter</code>:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.generlas.winterexam.view.adapter</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.fragment.app.Fragment</span><br><span class="line"><span class="keyword">import</span> androidx.fragment.app.FragmentActivity</span><br><span class="line"><span class="keyword">import</span> androidx.viewpager2.adapter.FragmentStateAdapter</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ViewPager2Adapter</span>(fragment: FragmentActivity, <span class="keyword">private</span> <span class="keyword">val</span> list: MutableList&lt;Fragment&gt;) :</span><br><span class="line">    FragmentStateAdapter(fragment) &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getItemCount</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.size</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">createFragment</span><span class="params">(position: <span class="type">Int</span>)</span></span>: Fragment &#123;</span><br><span class="line">        <span class="keyword">return</span> list[position]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为切换的是fragment，所以直接继承<code>FragmentStateAdapter</code>。</p>
<p><code>MainActivity.kt</code>：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置底部导航按钮</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">setBottomNavigation</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//绑定视图</span></span><br><span class="line">        <span class="keyword">val</span> mNavBottom: BottomNavigationView = findViewById(R.id.homepage_navigation_bottom)</span><br><span class="line">        <span class="keyword">val</span> mBottomViewpager2: ViewPager2 = findViewById(R.id.bottom_navigation_viewpage2)</span><br><span class="line"></span><br><span class="line">        mNavBottom.itemIconTintList = <span class="literal">null</span> <span class="comment">//取消导航栏的默认颜色</span></span><br><span class="line">        <span class="comment">//将fragment添加进适配器</span></span><br><span class="line">        <span class="keyword">val</span> fragmentList: MutableList&lt;Fragment&gt; = ArrayList()</span><br><span class="line">        fragmentList.add(HomeFragment())</span><br><span class="line">        fragmentList.add(PublicFragment())</span><br><span class="line">        fragmentList.add(NavigationFragment())</span><br><span class="line">        mBottomViewpager2.adapter = ViewPager2Adapter(<span class="keyword">this</span>, fragmentList)</span><br><span class="line"></span><br><span class="line">        mBottomViewpager2.isUserInputEnabled = <span class="literal">false</span> <span class="comment">//禁用ViewPager2的手势滑动</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//fragment切换时底部导航跟着切换</span></span><br><span class="line">        mBottomViewpager2.registerOnPageChangeCallback(<span class="keyword">object</span> : ViewPager2.OnPageChangeCallback() &#123;</span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onPageSelected</span><span class="params">(position: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">                <span class="keyword">super</span>.onPageSelected(position)</span><br><span class="line">                mNavBottom.menu.getItem(position).isChecked = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//底部导航切换时fragment跟着切换</span></span><br><span class="line">        mNavBottom.setOnItemSelectedListener &#123; item -&gt;</span><br><span class="line">            <span class="keyword">when</span> (item.itemId) &#123;</span><br><span class="line">                R.id.bottom_home -&gt; &#123;</span><br><span class="line">                    mBottomViewpager2.currentItem = <span class="number">0</span></span><br><span class="line">                    <span class="keyword">return</span><span class="symbol">@setOnItemSelectedListener</span> <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                R.id.bottom_public -&gt; &#123;</span><br><span class="line">                    mBottomViewpager2.currentItem = <span class="number">1</span></span><br><span class="line">                    <span class="keyword">return</span><span class="symbol">@setOnItemSelectedListener</span> <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                R.id.bottom_navigation -&gt; &#123;</span><br><span class="line">                    mBottomViewpager2.currentItem = <span class="number">2</span></span><br><span class="line">                    <span class="keyword">return</span><span class="symbol">@setOnItemSelectedListener</span> <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="自定义toolbar的菜单图标">自定义toolbar的菜单图标</h2>
<p><img src="https://img.z4a.net/images/2025/02/10/1.png" alt=""></p>
<p>如上图所示，toolbar能自定义添加按钮(如搜索按钮)</p>
<p>只需要在<code>MainActivity.kt</code>中添加:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 处理toolbar上抽屉开关等图标的点击事件</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onOptionsItemSelected</span><span class="params">(item: <span class="type">MenuItem</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置抽屉栏按钮的点击</span></span><br><span class="line">    <span class="keyword">if</span> (toggle.onOptionsItemSelected(item)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">when</span> (item.itemId) &#123;</span><br><span class="line">        R.id.search -&gt; &#123;</span><br><span class="line">            <span class="keyword">val</span> intent = Intent(<span class="keyword">this</span>, SearchActivity::<span class="keyword">class</span>.java)</span><br><span class="line">            startActivity(intent)</span><br><span class="line">            <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> -&gt; <span class="keyword">super</span>.onOptionsItemSelected(item)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加载toolbar的搜索按钮</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateOptionsMenu</span><span class="params">(menu: <span class="type">Menu</span>?)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    menuInflater.inflate(R.menu.menu_toolbar_main, menu)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同样也需要添加目录资源<code>menu_toolbar_main.xml</code>:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/search&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;@drawable/ic_search&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">&quot;search&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:showAsAction</span>=<span class="string">&quot;always&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>通过上述方法，你就可以很容易搭建起一个基本的页面框架了。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack学习笔记</title>
    <url>/2025/02/19/Jetpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1>Jetpack</h1>
<p><code>jetpack</code>是Google推出的新的架构组件库，分为基础，架构，行为，界面4个部分。</p>
<h2 id="ViewModel">ViewModel</h2>
<p>$\texttt{ViewModel}$可以帮助Activity分担一部分工作，这样就不用让Activity里面的代码看着非常复杂，减少逻辑。并且$\texttt{ViewModel}$的生命周期是要比Activity长的，当手机屏幕旋转时，Activity会经历<code>onPause(),onStop(),onDestroy(),onCreate(),onStart(),onResume()</code>的过程，这中途我们创建的数据就会一同丢失，而$\texttt{ViewModel}$则很好的避免了这一点，他能在旋转时数据不丢失，而只有Activity退出时才会一起退出。</p>
<p>先在<code>build.gradle</code>里面添加:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">implementation &quot;androidx.lifecycle:lifecycle-viewmodel-ktx:2.8.7&quot;</span><br><span class="line">implementation &quot;androidx.lifecycle:lifecycle-livedata-ktx:2.8.7&quot;</span><br></pre></td></tr></table></figure>
<p>假设我们要实现一个计数器，按一下加一。<code>activity_main.xml</code>:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/main&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_main_info&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;30dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/btn_main_plus&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;32dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Plus One&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">&quot;0.498&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">&quot;@+id/tv_main_info&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后创建一个<code>MainViewModel</code>类继承<code>ViewModel</code>，里面用于存储我们计数的值:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainViewModel</span> : <span class="type">ViewModel</span>() &#123;</span><br><span class="line">    <span class="keyword">var</span> counter = <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后<code>MainActivity.kt</code>:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainActivity</span> : <span class="type">AppCompatActivity</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> viewModel: MainViewModel</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> mBtnPlus: Button</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> mTvText: TextView</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> mBtnClear: Button</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        lifecycle.addObserver(MyObserve())</span><br><span class="line"></span><br><span class="line">        mTvText = findViewById(R.id.tv_main_info)</span><br><span class="line">        mBtnPlus = findViewById(R.id.btn_main_plus)       </span><br><span class="line"></span><br><span class="line">        ViewModel = ViewModelProvider(<span class="keyword">this</span>).<span class="keyword">get</span>(MainViewModel::<span class="keyword">class</span>.java)</span><br><span class="line">        </span><br><span class="line">        mBtnPlus.setOnClickListener &#123;</span><br><span class="line">            viewModel.counter++</span><br><span class="line">            update()</span><br><span class="line">        &#125;</span><br><span class="line">        update()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">update</span><span class="params">()</span></span> &#123;</span><br><span class="line">        mTvText.text = viewModel.counter.toString()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们在创建ViewModel时，为什么不直接写成<code>viewmodel = MainViewModel()</code>呢？因为如果这样，每次旋转屏幕时都会调用<code>onCreate()</code>方法，则ViewModel就跟着被重新创建了，不能达到预期效果，所以我们需要通过<code>ViewModelProvider</code>来创建实例:</p>
<p><code>ViewModelProvider(Activity/Fragment实例).get(...ViewModel::class.java)</code></p>
<p>这样我们就可以实现基本的计数，按一次加一，同时当我们旋转屏幕时数据也不会丢失。</p>
<h3 id="向ViewModel传递参数">向ViewModel传递参数</h3>
<p>假如我们想对这个计数器实现保存或者自定义初始数功能，又该如何向ViewModel传递参数呢？我们需要借助<code>ViewModelProvider.Factory</code>接口，重写create接口:</p>
<p><code>MainViewModel.kt</code>:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainViewModel</span>(countReserved: <span class="built_in">Int</span>) : ViewModel() &#123;</span><br><span class="line">    <span class="keyword">var</span> counter = countReserved</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新建一个<code>MainViewModelFactory</code>类:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainViewModelFactory</span>(<span class="keyword">private</span> <span class="keyword">val</span> countReserved: <span class="built_in">Int</span>) : ViewModelProvider.Factory &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : ViewModel&gt;</span> <span class="title">create</span><span class="params">(modelClass: <span class="type">Class</span>&lt;<span class="type">T</span>&gt;)</span></span>: T &#123;</span><br><span class="line">        <span class="keyword">return</span> MainViewModel(countReserved) <span class="keyword">as</span> T</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后我们加上一个clear按钮:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/main&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_main_info&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;30dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/btn_main_plus&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;32dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Plus One&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">&quot;0.498&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">&quot;@+id/tv_main_info&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/btn_main_clear&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;clear&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">&quot;@+id/btn_main_plus&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后修改<code>MainActivity.kt</code>:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainActivity</span> : <span class="type">AppCompatActivity</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> viewModel: MainViewModel</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> mBtnPlus: Button</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> mTvText: TextView</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> mBtnClear: Button</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        lifecycle.addObserver(MyObserve())</span><br><span class="line">        mTvText = findViewById(R.id.tv_main_info)</span><br><span class="line">        mBtnPlus = findViewById(R.id.btn_main_plus)   </span><br><span class="line">        mBtnClear = findViewById(R.id.btn_main_clear)</span><br><span class="line"></span><br><span class="line">        ViewModel = ViewModelProvider(<span class="keyword">this</span>, MainViewModelFactory(<span class="number">1</span>)).<span class="keyword">get</span>(MainViewModel::<span class="keyword">class</span>.java)</span><br><span class="line">        </span><br><span class="line">        mBtnPlus.setOnClickListener &#123;</span><br><span class="line">            viewModel.counter++</span><br><span class="line">            update()</span><br><span class="line">        &#125;</span><br><span class="line">        mBtnClear.setOnClickListener &#123;</span><br><span class="line">            viewModel.counter = <span class="number">0</span></span><br><span class="line">            update()</span><br><span class="line">        &#125;</span><br><span class="line">        update()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">update</span><span class="params">()</span></span> &#123;</span><br><span class="line">        mTvText.text = viewModel.counter.toString()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Lifecycles">Lifecycles</h2>
<p>我们在一个activity页面中能很好的感知他的生命周期，假如我们想要在其他类中同样去感知生命周期呢，当然可以构建一个方法，在activity的生命周期中去调用这个方法去告诉他我们现在是什么生命周期。而为了减少activity的逻辑，我们就引入了lifecycle。</p>
<p>新建一个<code>MyObserver</code>类:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyObserver</span> : <span class="type">DefaultLifecycleObserver</span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(owner: <span class="type">LifecycleOwner</span>)</span></span> &#123;</span><br><span class="line">        Log.d(<span class="string">&quot;zzx&quot;</span>,<span class="string">&quot;(OnCreate:)--&gt;&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onStart</span><span class="params">(owner: <span class="type">LifecycleOwner</span>)</span></span> &#123;</span><br><span class="line">        Log.d(<span class="string">&quot;zzx&quot;</span>,<span class="string">&quot;(OnStart:)--&gt;&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onResume</span><span class="params">(owner: <span class="type">LifecycleOwner</span>)</span></span> &#123;</span><br><span class="line">        Log.d(<span class="string">&quot;zzx&quot;</span>,<span class="string">&quot;(OnResume:)--&gt;&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onPause</span><span class="params">(owner: <span class="type">LifecycleOwner</span>)</span></span> &#123;</span><br><span class="line">        Log.d(<span class="string">&quot;zzx&quot;</span>,<span class="string">&quot;(OnPause:)--&gt;&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onStop</span><span class="params">(owner: <span class="type">LifecycleOwner</span>)</span></span> &#123;</span><br><span class="line">        Log.d(<span class="string">&quot;zzx&quot;</span>,<span class="string">&quot;(onStop:)--&gt;&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDestroy</span><span class="params">(owner: <span class="type">LifecycleOwner</span>)</span></span> &#123;</span><br><span class="line">        Log.d(<span class="string">&quot;zzx&quot;</span>,<span class="string">&quot;(onDestroy:)--&gt;&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过继承<code>DefaultLifecycleObserver</code>来实现对Activity生命周期的感知。</p>
<p>然后在<code>MainActivity.kt</code>添加这行代码:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">lifecycle.addObserver(MyObserver())</span><br></pre></td></tr></table></figure>
<p>就实现了对activity的生命周期的监听。其中<code>lifecycle</code>是通过<code>getLifecycle()</code>得到的一个Lifecycle对象。</p>
<h2 id="LiveData">LiveData</h2>
<p>LiveData能在数据改变时响应并能主动提供给观察者，能和ViewModel搭配使用。我们之前的加一方法在单线程时肯定能用，但是如果我们在MainViewModel里面去开启了一些新的线程，此时我们在MainActivity里面调用肯定是行不通的，所以我们就可以用LiveData去让数据主动通知观察者。</p>
<p><code>MainViewModel.kt</code>:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainViewModel</span>(countReserved: <span class="built_in">Int</span>) : ViewModel() &#123;</span><br><span class="line">    </span><br><span class="line">   	<span class="keyword">val</span> counter = MutableLiveData&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        counter.value = countReserved</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">plusOne</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> count = counter.value ?: <span class="number">0</span></span><br><span class="line">        counter.value = count + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">clear</span><span class="params">()</span></span> &#123;</span><br><span class="line">        counter.value = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们将<code>counter</code>变量修改成了<code>MutableLiveData</code>对象，并将泛型指定成$\texttt{Int}$。这是一种可变的LiveData，能通过<code>getValue(),setValue(),postValue()</code>三种方法进行读写数据。<code>getValue()</code>是获取LiveData中的数据，<code>setValue()</code>是给LiveData设置数据，但是只能在主线程调用。如果我们开启了新线程，则需要用<code>postValue()</code>设置数据。上面代码则是用的<code>getValue()</code>和<code>setValue()</code>的语法糖。然后修改<code>MainActivity.kt</code>:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainActivity</span> : <span class="type">AppCompatActivity</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> viewModel: MainViewModel</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> mBtnPlus: Button</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> mTvText: TextView</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> mBtnClear: Button</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        lifecycle.addObserver(MyObserver())</span><br><span class="line"></span><br><span class="line">        viewModel = ViewModelProvider(<span class="keyword">this</span>, MainViewModelFactory(<span class="number">100</span>)).<span class="keyword">get</span>(MainViewModel::<span class="keyword">class</span>.java)</span><br><span class="line"></span><br><span class="line">        mTvText = findViewById(R.id.tv_main_info)</span><br><span class="line">        mBtnPlus = findViewById(R.id.btn_main_plus)</span><br><span class="line">        mBtnClear = findViewById(R.id.btn_main_clear)</span><br><span class="line"></span><br><span class="line">        mBtnPlus.setOnClickListener &#123;</span><br><span class="line">            viewModel.plusOne()</span><br><span class="line">        &#125;</span><br><span class="line">        mBtnClear.setOnClickListener &#123;</span><br><span class="line">            viewModel.clear()</span><br><span class="line">        &#125;</span><br><span class="line">        viewModel.counter.observe(<span class="keyword">this</span>) &#123;count -&gt;</span><br><span class="line">            mTvText.text = count.toString()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里我们通过调用<code>counter</code>这个对象的<code>observe</code>方法来观察数据变化，第一个参数是LifecycleOwner对象，由于Activity和fragment本身继承了lifecycleowner，所以可以直接传this进去，第二个参数就是Observer接口，当<code>counter</code>包含的数据变化时，会直接回调到这里。注意，这里其实并不能写成函数API的形式，因为this本质上是LifecycleOwner也是个单抽象方法接口，所以这里要么两种都写成api函数形式，但这里已经用了this了所以不行。但<code>implementation &quot;androidx.lifecycle:lifecycle-livedata-ktx:2.8.7&quot;</code>这个库加入了对observe()的语法扩展，我们就可以改成上面这种格式了。</p>
<p>然后现在的counter我们是暴露在外面的，破坏了封装性，我们可以设置一个永不可变的变量暴露给外面，但我们调用他时拿到的确实内部可变的counter，这样外部只能拿而不能修改了。<code>MainViewModel.kt</code>代码如下:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainViewModel</span>(countReserved: <span class="built_in">Int</span>) : ViewModel() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> counter: LiveData&lt;<span class="built_in">Int</span>&gt;</span><br><span class="line">        <span class="keyword">get</span>() = _counter</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> _counter = MutableLiveData&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        _counter.value = countReserved</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">plusOne</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> count = _counter.value ?: <span class="number">0</span></span><br><span class="line">        _counter.value = count + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">clear</span><span class="params">()</span></span> &#123;</span><br><span class="line">        _counter.value = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="map和switchMap">map和switchMap</h3>
<h4 id="map">map</h4>
<p>map()方法是将实际包含数据的<code>liveData()</code>对象与被观察的<code>liveData()</code>对象间的转换。比如我们定义一个数据类:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">User</span>(<span class="keyword">var</span> firstName: String, <span class="keyword">var</span> lastName: String, <span class="keyword">var</span> age: <span class="built_in">Int</span>)</span><br></pre></td></tr></table></figure>
<p>然后再在<code>MaiViewModel.kt</code>中创建一个$\texttt{liveData}$对象:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> userLiveData = MutableLiveData&lt;User&gt;()</span><br></pre></td></tr></table></figure>
<p>但假如我们只想关注用户的名字而不想让年龄暴露出去，就需要将这个User的$\texttt{liveData}$对象转成只带名字的$\texttt{liveData}$对象，就需要用到map()这个方法来将两个$\texttt{liveData}$对象进行转换。</p>
<p>在<a href="https://developer.android.com/jetpack/androidx/releases/lifecycle?hl=zh-cn">google开发者说明</a>中，<code>lifecycle2.5</code>是用的<code>Transformations.map(liveData) &#123;...&#125;</code>这种形式，而在2.6往后就改成了<code>liveData.map &#123;...&#125;</code>。然后我们进行转换:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> userLiveData = MutableLiveData&lt;User&gt;()</span><br><span class="line"><span class="keyword">val</span> username: LiveData&lt;String&gt; = userLiveData.map &#123; user -&gt;</span><br><span class="line">    <span class="string">&quot;<span class="subst">$&#123;user.firstName&#125;</span> <span class="subst">$&#123;user.lastName&#125;</span>&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="switchMap">switchMap</h4>
<p><code>switchMap()</code>使用方法就比较固定了，适用于对不在<code>MainViewModel</code>类里面创建的$\texttt{liveData}$对象进行观察。比如我们创建一个单例类:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">object</span> Repository &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getUser</span><span class="params">(userId: <span class="type">String</span>)</span></span> : LiveData&lt;User&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> liveData = MutableLiveData&lt;User&gt;()</span><br><span class="line">        liveData.value = User(userId, userId, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> liveData</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们接受一个<code>userId</code>的参数来返回一个$\texttt{liveData}$对象。然后在<code>MainViewModel.kt</code>中接收:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getUser</span><span class="params">(userId: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    userIdLiveData.value = userId</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是在<code>MainActivity.kt</code>中直接用<code>viewModel.getUser(userId).observe(this) &#123;user -&gt; &#125;</code>是肯定不行的，因为这样每次的返回一个新的$\texttt{liveData}$实例，但上述observe返回的却会是老的$\texttt{liveData}$实例，无法观察到数据的变化。这时候我们就可以用<code>switchMap</code>来观察:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> userIdLiveData = MutableLiveData&lt;String&gt;()</span><br><span class="line"><span class="keyword">val</span> users: LiveData&lt;User&gt; = userIdLiveData.switchMap &#123; userId -&gt;</span><br><span class="line">    Repository.getUser(userId)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getUser</span><span class="params">(userId: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    userIdLiveData.value = userId</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们创建了一个空的可变$\texttt{liveData}$对象，每次Activity中调用<code>getUser()</code>时仅仅只会改变<code>userIdLiveData</code>的值，而当这个值发生变化时，<code>switchMap</code>便会进行观察，然后将函数返回的值转成一个可观察的$\texttt{liveData}$对象，然后我们只需要在Activity中去观察<code>users</code>这个对象就好了。</p>
<p>假如getUser()中没有参数怎么办呢?只需要改成:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getUser</span><span class="params">()</span></span> &#123;</span><br><span class="line">    userIdLiveData.value = userIdLiveData.value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就可以了，因为$\texttt{liveData}$内部只需要判断是否调用<code>setValue()</code>或<code>getValue()</code>方法，而不会判断是否与原数据相同。</p>
<h2 id="ViewBinding">ViewBinding</h2>
<p><code>ViewBinding</code>可以用来代替重复写<code>findViewById</code>，在每个视图生成时一次性加载全部控件。</p>
<p>首先在<code>build.gradle</code>中启用<code>ViewBinding</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    ...</span><br><span class="line">    viewBinding &#123;</span><br><span class="line">        enabled = true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果某一个<code>xml</code>不需要生成绑定类，就添加:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">...</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:viewBindingIgnore</span>=<span class="string">&quot;true&quot;</span> &gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>且XML文件生成的绑定类类名为xml文件名转换为Pascal大小写，并加上Binding。如:<code>activity_main.xml</code>转为<code>ActivityMainBinding</code>。</p>
<p>三个类绑定API:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// View已存在</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">bind</span><span class="params">(view : <span class="type">View</span>)</span></span> : T</span><br><span class="line"></span><br><span class="line"><span class="comment">// View未存在</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">inflate</span><span class="params">(inflater : <span class="type">LayoutInflater</span>)</span></span> : T</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">inflate</span><span class="params">(inflater : <span class="type">LayoutInflater</span>, parent : <span class="type">ViewGroup</span>?, attachToParent : <span class="type">Boolean</span>)</span></span> : T</span><br></pre></td></tr></table></figure>
<p>接下来是各种场景<code>ViewBinding</code>的演示:</p>
<h3 id="Activity">Activity</h3>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainActivity</span> : <span class="type">AppCompatActivity</span>() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> binding: ActivityMainBinding</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        <span class="comment">// 1、实例化绑定实例</span></span><br><span class="line">        binding = ActivityMainBinding.inflate(layoutInflater)</span><br><span class="line">        <span class="comment">// 2、获得对根视图的引用</span></span><br><span class="line">        <span class="keyword">val</span> view = binding.root</span><br><span class="line">        <span class="comment">// 3、让根视图称为屏幕上的活动视图</span></span><br><span class="line">        setContentView(view)</span><br><span class="line">        <span class="comment">// 4、引用视图控件</span></span><br><span class="line">        binding.tvContent.text = <span class="string">&quot;修改TextView文本&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Fragment">Fragment</h3>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ContentFragment</span>: <span class="type">Fragment</span>() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> _binding: FragmentContentBinding? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> binding <span class="keyword">get</span>() = _binding!!</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        inflater: <span class="type">LayoutInflater</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        container: <span class="type">ViewGroup</span>?,</span></span></span><br><span class="line"><span class="params"><span class="function">        savedInstanceState: <span class="type">Bundle</span>?</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>: View &#123;</span><br><span class="line">        _binding = FragmentContentBinding.inflate(inflater, container, <span class="literal">false</span>)</span><br><span class="line">        <span class="keyword">return</span> binding.root</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onViewCreated</span><span class="params">(view: <span class="type">View</span>, savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onViewCreated(view, savedInstanceState)</span><br><span class="line">        binding.ivLogo.visibility = View.GONE</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDestroyView</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroyView()</span><br><span class="line">        <span class="comment">// Fragment的存活时间比View长，务必在此方法中清除对绑定类实例的所有引用</span></span><br><span class="line">        <span class="comment">// 否则会引发内存泄露</span></span><br><span class="line">        _binding = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="RecyclerView">RecyclerView</h3>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestAdapter</span>(list: List&lt;String&gt;) : RecyclerView.Adapter&lt;TestAdapter.ViewHolder&gt;() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mList: List&lt;String&gt; = list</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateViewHolder</span><span class="params">(parent: <span class="type">ViewGroup</span>, viewType: <span class="type">Int</span>)</span></span>: ViewHolder &#123;</span><br><span class="line">        <span class="comment">// 需在此初始化以获得父类容器,假设父类容器为item_test</span></span><br><span class="line">        <span class="keyword">val</span> binding = ItemTestBinding.inflate(LayoutInflater.from(parent.context), parent, <span class="literal">false</span>)</span><br><span class="line">        <span class="keyword">return</span> ViewHolder(binding)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onBindViewHolder</span><span class="params">(holder: <span class="type">ViewHolder</span>, position: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        holder.tvItem.text = <span class="string">&quot;Adapter&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getItemCount</span><span class="params">()</span></span> = mList.size</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 传递Binding对象</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">ViewHolder</span>(binding: ItemTestBinding) : RecyclerView.ViewHolder(binding.root) &#123;</span><br><span class="line">        <span class="keyword">var</span> tvItem: TextView = binding.tvItem</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Dialog">Dialog</h3>
<p>如果是继承DialogFragment写法同Fragment，如果是继承Dialog写法示例如下(PopupWindow类似)</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestDialog</span>(context: Context) : Dialog(context) &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        <span class="keyword">val</span> binding = DialogTestBinding.inflate(layoutInflater)</span><br><span class="line">        setContentView(binding.root)</span><br><span class="line">        binding.tvTitle.text = <span class="string">&quot;对话框标题&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="include">include</h3>
<p>在使用<code>include</code>导入xml布局时，也可以用<code>viewbinding</code>：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> includeBinding = binding.includeLayout</span><br><span class="line">includeBinding.etInput.setText(<span class="string">&quot;info&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="封装">封装</h3>
<p>如果这样写，我们每次都需要写一遍很麻烦，我们可以用泛型去封装。</p>
<h4 id="Activity的封装">Activity的封装</h4>
<p>以上面的计时器为例，先创建一个<code>BaseActivity</code>:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BaseActivity</span>&lt;<span class="type">T: ViewBinding</span>&gt;: <span class="type">AppCompatActivity</span>() &#123;</span><br><span class="line">    <span class="keyword">val</span> binding <span class="keyword">get</span>() = _binding!!</span><br><span class="line">    <span class="keyword">var</span> _binding: T? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">inflateBinding</span><span class="params">()</span></span>: T</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        _binding = inflateBinding()</span><br><span class="line">        setContentView(binding.root)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDestroy</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy()</span><br><span class="line">        _binding = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>MainActivity.kt</code>:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainActivity</span> : <span class="type">BaseActivity</span>&lt;<span class="type">ActivityMainBinding</span>&gt;() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> viewModel: MainViewModel</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> mBtnPlus: Button</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> mTvText: TextView</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> mBtnClear: Button</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">inflateBinding</span><span class="params">()</span></span>: ActivityMainBinding &#123;</span><br><span class="line">        <span class="keyword">return</span> ActivityMainBinding.inflate(layoutInflater)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        </span><br><span class="line">        lifecycle.addObserver(MyObserver())</span><br><span class="line"></span><br><span class="line">        viewModel = ViewModelProvider(<span class="keyword">this</span>, MainViewModelFactory(<span class="number">100</span>)).<span class="keyword">get</span>(MainViewModel::<span class="keyword">class</span>.java)</span><br><span class="line"></span><br><span class="line">        mTvText = findViewById(R.id.tv_main_info)</span><br><span class="line">        mBtnPlus = findViewById(R.id.btn_main_plus)</span><br><span class="line">        mBtnClear = findViewById(R.id.btn_main_clear)</span><br><span class="line"></span><br><span class="line">        binding.btnMainPlus.setOnClickListener &#123;</span><br><span class="line">            viewModel.plusOne()</span><br><span class="line">        &#125;</span><br><span class="line">        binding.btnMainClear.setOnClickListener &#123;</span><br><span class="line">            viewModel.clear()</span><br><span class="line">        &#125;</span><br><span class="line">        viewModel.counter.observe(<span class="keyword">this</span>) &#123;count -&gt;</span><br><span class="line">            mTvText.text = count.toString()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Fragment的封装">Fragment的封装</h4>
<p><code>BaseFragment.kt</code>:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BaseFragment</span>&lt;<span class="type">T: ViewBinding</span>&gt; : <span class="type">Fragment</span>() &#123;</span><br><span class="line">    <span class="keyword">var</span> _binding: T? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">val</span> binding <span class="keyword">get</span>() = _binding!!</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">inflateBinding</span><span class="params">(inflater: <span class="type">LayoutInflater</span>, container: <span class="type">ViewGroup</span>?)</span></span>: T</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        inflater: <span class="type">LayoutInflater</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        container: <span class="type">ViewGroup</span>?,</span></span></span><br><span class="line"><span class="params"><span class="function">        savedInstanceState: <span class="type">Bundle</span>?</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>: View? &#123;</span><br><span class="line">        _binding = inflateBinding(inflater, container)</span><br><span class="line">        <span class="keyword">return</span> binding.root</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDestroyView</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroyView()</span><br><span class="line">        _binding = <span class="literal">null</span> <span class="comment">//一定要置空</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>BlankFragment.kt</code>:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BlankFragment</span> : <span class="type">BaseFragment</span>&lt;<span class="type">FragmentBlankBinding</span>&gt;() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">inflateBinding</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        inflater: <span class="type">LayoutInflater</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        container: <span class="type">ViewGroup</span>?</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>: FragmentBlankBinding &#123;</span><br><span class="line">        <span class="keyword">return</span> FragmentBlankBinding.inflate(inflater,container,<span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onViewCreated</span><span class="params">(view: <span class="type">View</span>, savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onViewCreated(view, savedInstanceState)</span><br><span class="line">        <span class="comment">// 在这里编写你的代码</span></span><br><span class="line">        binding.textView.text = <span class="string">&quot;Hello, ViewBinding in Fragment!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用ViewBinding加载绑定视图">使用ViewBinding加载绑定视图</h3>
<p>假设现在有个<code>custom_view.xml</code>需要加载:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainActivity</span> : <span class="type">BaseActivity</span>&lt;<span class="type">ActivityMainBinding</span>&gt;() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">inflateBinding</span><span class="params">()</span></span>: ActivityMainBinding &#123;</span><br><span class="line">        <span class="keyword">return</span> ActivityMainBinding.inflate(layoutInflater)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 LayoutInflater 加载包含布局</span></span><br><span class="line">        <span class="keyword">val</span> inflater = LayoutInflater.from(<span class="keyword">this</span>)</span><br><span class="line">        <span class="keyword">val</span> customViewBinding = CustomViewBinding.inflate(inflater, binding.root, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 操作包含布局中的视图</span></span><br><span class="line">        customViewBinding.textView.text = <span class="string">&quot;Hello from Custom View!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>补:关于<code>inflate()</code>最后一个参数，表示是否将这个视图添加到<code>root</code>中，如果为<code>true</code>则会立即添加，如果为<code>false</code>，你可以决定什么时候添加，只需要添加如下代码:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 LayoutInflater 加载包含布局，但不自动添加到父视图中</span></span><br><span class="line"><span class="keyword">val</span> customViewBinding = CustomViewBinding.inflate(layoutInflater, binding.root, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 手动将新视图添加到父视图中</span></span><br><span class="line">binding.root.addView(customViewBinding.root)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Jetpack</tag>
      </tags>
  </entry>
  <entry>
    <title>Kotlin高阶函数</title>
    <url>/2025/02/19/Kotlin%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1>Kotlin高阶函数</h1>
<h2 id="定义高阶函数">定义高阶函数</h2>
<p>之前的的函数式AP会接受Lambda参数，同样我们也可以自定义一个函数式API，也就是高阶函数。</p>
<blockquote>
<p>高阶函数的定义是一个函数接受另一个函数作为他的参数，或者返回值是一个函数，那这个函数就是高阶函数。</p>
</blockquote>
<p>那么如何定义一个函数类型呢?基本规则就是:<code>(String, Int) -&gt; Unit</code>。其中<code>(String, Int)</code>表示传的参数类型，如果没有也可以为空，<code>Unit</code>指的是没有返回值，也可以改成<code>String,Int</code>等。</p>
<p>比如我们定义一个<code>num1AndNum2()</code>高阶函数:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">num1AndNum2</span><span class="params">(num1: <span class="type">Int</span>, num2: <span class="type">Int</span>, operation: (<span class="type">Int</span>, <span class="type">Int</span>) -&gt; <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> result = operation(num1,num2)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>num1,num2</code>很好理解就是两个参数，<code>operation: (Int, Int) -&gt; Int</code>就是我们传的函数了，代表这个函数需要传两个Int类型的参数，然后返回值为Int，然后我们定义两个函数:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">plus</span><span class="params">(num1: <span class="type">Int</span>, num2: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">minus</span><span class="params">(num1: <span class="type">Int</span>, num2: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num1 - num2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这两个函数就符合<code>operation</code>这个函数类型，然后我们调用这个高阶函数:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> num1 = <span class="number">100</span></span><br><span class="line">    <span class="keyword">val</span> num2 = <span class="number">80</span></span><br><span class="line">    <span class="keyword">val</span> result1 = num1AndNum2(num1,num2,::plus)</span><br><span class="line">    <span class="keyword">val</span> result2 = num1AndNum2(num1,num2,::mini)</span><br><span class="line">    println(<span class="string">&quot;result1 is <span class="variable">$result1</span>, result2 is <span class="variable">$result2</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中第三个参数<code>::plus</code>是函数引用方式的写法，代表将这个函数作为参数传了进去。运行结果如下:</p>
<p><img src="https://img.z4a.net/images/2025/02/18/6ac74c4ce2c65e41b7f2b5a0a4cb6ff9.png" alt="高阶函数运行结果"></p>
<p>既然我们传的是函数参数类型，我们也可以直接用lambda表达式直接传进去，就会改成:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> num1 = <span class="number">100</span></span><br><span class="line">    <span class="keyword">val</span> num2 = <span class="number">80</span></span><br><span class="line">    <span class="keyword">val</span> result1 = num1AndNum2(num1,num2) &#123;n1,n2 -&gt;</span><br><span class="line">        n1 + n2</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> result2 = num1AndNum2(num1,num2) &#123;n1,n2 -&gt;</span><br><span class="line">        n1 - n2</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;result1 is <span class="variable">$result1</span>, result2 is <span class="variable">$result2</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码表示将<code>n1,n2</code>作为参数，<code>n1-n2</code>(最后一行代码)作为返回值，结果与上述是一样的。</p>
<p>高阶函数可以被用于拓展函数中来使得代码更精简，比如<code>apply</code>的用法。我们新建一个<code>StringBuilder</code>的拓展函数:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> StringBuilder.<span class="title">build</span><span class="params">(block: <span class="type">StringBuilder</span>.() -&gt; <span class="type">Unit</span>)</span></span>: StringBuilder &#123;</span><br><span class="line">    block()</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中<code>fun StringBuilder.build</code>就是对<code>StringBuilder</code>增加了一个拓展函数，然后<code>block: StringBuilder.()</code>中将函数类型定义到<code>StringBuilder</code>类中的好处就是能提供上下文，使得更简单的操作，然后最后的<code>return this</code>就是返回这个定义的<code>StringBuilder</code>对象。然后调用:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> list = listOf(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Pear&quot;</span>, <span class="string">&quot;Grape&quot;</span>, <span class="string">&quot;Watermelon&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> result = StringBuilder().build &#123;</span><br><span class="line">        append(<span class="string">&quot;Start eating fruits.\n&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span>(fruit <span class="keyword">in</span> list) &#123;</span><br><span class="line">            append(fruit).append(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        append(<span class="string">&quot;Ate all fruits.&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    println(result.toString())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>就实现了类似<code>apply</code>的用法了。</p>
<h2 id="内联函数">内联函数</h2>
<p>在我们定义一个高阶函数时，当编译器转成Java时，会将这个函数创建一个匿名类，意思是每次调用都会创建一个增大开销，而为了避免不必要的开销，就引入了内联函数，只需要在高阶函数前加上<code>inline</code>即可:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="title">num1AndNum2</span><span class="params">(num1: <span class="type">Int</span>, num2: <span class="type">Int</span>, operation: (<span class="type">Int</span>, <span class="type">Int</span>) -&gt; <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> result = operation(num1,num2)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>内联函数的原理时当进行调用时会进行替换，即将<code>n1+n2</code>替换到<code>operation</code>处，然后再将内联函数的代码全部替换到调用的地方。</p>
<h2 id="nonline与crossinline">nonline与crossinline</h2>
<p>当高阶函数被加上<code>inline</code>关键字后，里面参数的所有函数类型参数，在调用时均会进行替换，但假如我们某一个函数不想被u内联呢？只需要加上<code>nonline</code>关键字就好了。比如:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="title">inlineTest</span><span class="params">(block1: () -&gt; <span class="type">Unit</span>, nonline block2: () -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就只有<code>block1</code>会被内联了。那为什么有些时候我们不想被内联呢？最主要的是因为内联函数类型参数只允许传递给内联函数，而不能传递给非内联函数，比如:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个内联函数，带有一个内联的函数类型参数</span></span><br><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="title">inlineFunction1</span><span class="params">(block: () -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">    println(<span class="string">&quot;Before block execution in inlineFunction1&quot;</span>)</span><br><span class="line">    block()</span><br><span class="line">    println(<span class="string">&quot;After block execution in inlineFunction1&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再定义一个内联函数，带有一个内联的函数类型参数</span></span><br><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="title">inlineFunction2</span><span class="params">(block: () -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">    println(<span class="string">&quot;Before block execution in inlineFunction2&quot;</span>)</span><br><span class="line">    block()</span><br><span class="line">    println(<span class="string">&quot;After block execution in inlineFunction2&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个非内联函数</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">nonInlineFunction</span><span class="params">(block: () -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">    println(<span class="string">&quot;Before block execution in nonInlineFunction&quot;</span>)</span><br><span class="line">    block()</span><br><span class="line">    println(<span class="string">&quot;After block execution in nonInlineFunction&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 内联函数可以调用另一个内联函数</span></span><br><span class="line">    inlineFunction1 &#123;</span><br><span class="line">        inlineFunction2 &#123;</span><br><span class="line">            println(<span class="string">&quot;Hello from inlineFunction2&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内联函数不能调用非内联函数</span></span><br><span class="line">    <span class="comment">// 下面的代码会导致编译错误</span></span><br><span class="line">    <span class="comment">// inlineFunction1 &#123;</span></span><br><span class="line">    <span class="comment">//     nonInlineFunction &#123;</span></span><br><span class="line">    <span class="comment">//         println(&quot;Hello from nonInlineFunction&quot;)</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 非内联函数可以调用内联函数和非内联函数</span></span><br><span class="line">    nonInlineFunction &#123;</span><br><span class="line">        inlineFunction2 &#123;</span><br><span class="line">            println(<span class="string">&quot;Hello from inlineFunction2 inside nonInlineFunction&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码就很好的解释了限制性。还有就是内联函数所引用的lambda表达式是可以用<code>return</code>关键字进行函数返回的，而非内联函数只能进行局部返回:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printString</span><span class="params">(str: <span class="type">String</span>, block: (<span class="type">String</span>) -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">    println(<span class="string">&quot;begin&quot;</span>)</span><br><span class="line">    block(str)</span><br><span class="line">    println(<span class="string">&quot;end&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> str = <span class="string">&quot;&quot;</span></span><br><span class="line">    printString(str) &#123; s -&gt;</span><br><span class="line">    	print(<span class="string">&quot;lambda start&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span>(s.isEmpty()) <span class="keyword">return</span><span class="symbol">@printString</span></span><br><span class="line">        println(s)</span><br><span class="line">        println(<span class="string">&quot;lambda end&quot;</span>)              </span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;main end&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里使用了<code>return@printString</code>表示局部返回，不再执行lambda的剩余代码，而内联函数就可以直接使用<code>return</code>，因为他的本质是直接进行替换，会直接返回<code>main()</code>函数，所以编译后也不会执行<code>println(&quot;main end&quot;)</code>这行代码。所以大部分情况，我们都需要将高阶函数定义成内联函数。</p>
<p>有一种特殊情况:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="title">runRunnable</span><span class="params">(block: () -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> runnable = Runnable &#123;</span><br><span class="line">        block()</span><br><span class="line">    &#125;</span><br><span class="line">    runnable.run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码如果没有加<code>inline</code>是可以正常运行的，但如果加了<code>inline</code>的话就会报错:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Can&#x27;t inline &#x27;block&#x27; here: it may contain non-local returns. Add &#x27;crossinline&#x27; modifier to parameter declaration &#x27;block</span><br></pre></td></tr></table></figure>
<p>为什么会报错呢？因为Runnable实际上是一个非内联的函数参数，但是我们将<code>block()</code>这个内联函数作为参数传给了非内联函数，违反了内联函数参数的限制。因为内联函数允许使用<code>return</code>关键字而非内联函数是不允许使用的。那么如何解决呢？只需要加入<code>crossinline</code>关键字就可以了：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="title">runRunnable</span><span class="params">(<span class="keyword">crossinline</span> block: () -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> runnable = Runnable &#123;</span><br><span class="line">        block()</span><br><span class="line">    &#125;</span><br><span class="line">    runnable.run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>crossinline</code>关键字的作用是什么呢，相当于进行了一个约定，保证内联函数的lambda表达式中一定不会出现<code>return</code>关键字，就避免了冲突。这样申明后，在内联函数中仍可使用<code>return@runRunnable</code>进行局部返回，但绝对不能直接使用<code>return</code>。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>Kotlin的lambda函数式编程</title>
    <url>/2025/02/19/Kotlin%E7%9A%84lambda%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="lambda函数式编程">lambda函数式编程</h2>
<p>lambda表达式结构是:<code>&#123;参数名: 参数类型, 参数名: 参数类型 … -&gt; 函数体&#125;(参数1, 参数2, …)</code></p>
<p>如我们要找出字符串数组的最长的那个单词，可以写成:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> list = listOf(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Pear&quot;</span>, <span class="string">&quot;Grape&quot;</span>, <span class="string">&quot;Watermelon&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> maxLengthFruit = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> (fruit <span class="keyword">in</span> list) &#123;</span><br><span class="line">        <span class="keyword">if</span>(fruit.length &gt; maxLengthFruit.length) &#123;</span><br><span class="line">            maxLengthFruit = fruit</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    println(maxLengthFruit)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果我们想写成lambda表达式的话，可以用$\texttt{maxBy}$这个函数，该函数工作原理是接收一个lambda表达式，根据传入的条件来找到最大值。那么上述的代码就可以写成:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> list = listOf(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Pear&quot;</span>, <span class="string">&quot;Grape&quot;</span>, <span class="string">&quot;Watermelon&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> lambda = &#123;fruit: String -&gt; fruit.length&#125;</span><br><span class="line"><span class="keyword">val</span> maxLengthFruit = list.maxBy(lambda)</span><br></pre></td></tr></table></figure>
<p>然后对他进行简化，首先$\texttt{maxBy}$里面可以直接传lambda参数:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> maxLengthFruit = list.maxBy(&#123;fruit: String -&gt; fruit.length&#125;)</span><br></pre></td></tr></table></figure>
<p>然后$\texttt{Kotlin}$还规定，当lambda参数是函数最后一个参数时，可以将{}放在()后面:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> maxLengthFruit = list.maxBy()&#123;fruit: String -&gt; fruit.length&#125;</span><br></pre></td></tr></table></figure>
<p>如果lambda参数是函数唯一参数的话，还可以直接省略():</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> maxLengthFruit = list.maxBy&#123;fruit: String -&gt; fruit.length&#125;</span><br></pre></td></tr></table></figure>
<p>然后加上$\texttt{Kotlin}$的优秀推导类型的机制，可以直接省略类型，然后当参数只有一个时，可以直接用<code>it</code>代替:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> maxLengthFruit = list.maxBy&#123;it.length&#125;</span><br></pre></td></tr></table></figure>
<p>这样一步步推导就可以推导出最简形式了。</p>
<h3 id="map函数">map函数</h3>
<p>$\texttt{map}$函数非常常用，可以把集合的每个元素都映射成另一个值，规则则是由接受的lambda表达式决定。比如我们要将水果名变成大写:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> list = listOf(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Pear&quot;</span>, <span class="string">&quot;Grape&quot;</span>, <span class="string">&quot;Watermelon&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> newList = list.map&#123;it.toUpperCase()&#125;</span><br><span class="line"><span class="keyword">for</span>(fruit <span class="keyword">in</span> newList) &#123;</span><br><span class="line">    println(fruit)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果就是:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">APPLE</span><br><span class="line">BANANA</span><br><span class="line">ORANGE</span><br><span class="line">PEAR</span><br><span class="line">GRAPE</span><br><span class="line">WATERMELON</span><br></pre></td></tr></table></figure>
<h3 id="filter函数">filter函数</h3>
<p>$\texttt{filter}$函数可以过滤集合中的数据，也同样接受lambda表达式。，可以搭配$\texttt{map}$函数使用:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> list = listOf(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Pear&quot;</span>, <span class="string">&quot;Grape&quot;</span>, <span class="string">&quot;Watermelon&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> newList = list.filter&#123;it.length &lt; <span class="number">5</span>&#125;</span><br><span class="line">				  .map&#123;it.toUpperCase&#123;&#125;&#125;</span><br><span class="line"><span class="keyword">for</span>(fruit <span class="keyword">in</span> newList) &#123;</span><br><span class="line">    println(fruit)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果就是<code>PEAR</code>了。</p>
<h3 id="Java函数式API使用">Java函数式API使用</h3>
<p>当我们用Kotlin调用Java方法时，如果这个方法只接受一个Java单抽象方法接口参数就可以换成函数式API。单抽象方法接口指这个接口中只有一个待实现的方法。比如线程中的$\texttt{Runnable}$接口，就只有一个<code>run()</code>方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们在$\texttt{Thread}$类中接受一个$\texttt{Runnable}$参数:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123; <span class="comment">//使用匿名内部类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Thread is running&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure>
<p>在Kotlin中，没有new这个关键字，改成了object关键字:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">Thread(<span class="keyword">object</span> : Runnable &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;Thread is running&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start()</span><br></pre></td></tr></table></figure>
<p>然后这个Thread类的写法符合函数API的形式，故可以简化:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">Thread(Runnable &#123;</span><br><span class="line">    println(<span class="string">&quot;Thread is running&quot;</span>)</span><br><span class="line">&#125;).start()</span><br></pre></td></tr></table></figure>
<p>然后如果Java方法参数列表只有一个Java单抽象方法接口参数，可以直接对接口名省略:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">Thread(&#123;</span><br><span class="line">    println(<span class="string">&quot;Thread is running&quot;</span>)</span><br><span class="line">&#125;).start()</span><br></pre></td></tr></table></figure>
<p>然后根据上面的简化还可以将()省略:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">Thread&#123;</span><br><span class="line">    println(<span class="string">&quot;Thread is running&quot;</span>)</span><br><span class="line">&#125;.start()</span><br></pre></td></tr></table></figure>
<p>同样还有最常用的点击事件接口<code>OnClickListener</code>，也符合函数式API的形式:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">botton.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Kotlin中则可以简化成:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">button.setOnClickListener &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>就可以精简很多代码了。</p>
<h3 id="let-with-apply">let,with,apply</h3>
<p>这三个函数均提供了函数API编程接口，即能接受lambda表达式</p>
<h4 id="let">let</h4>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">obj.let &#123;obj2 -&gt;</span><br><span class="line">	<span class="comment">//业务逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上述代码中会自动将<code>obj</code>参数传给<code>obj2</code>，为了防止重名才取不同的名字</p>
<p>并且当只有一个参数时，可以用it代替。如现在有一个study类，类中有<code>readBooks(),doHomework()</code>两个方法，可以变成:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">doStudy</span><span class="params">(study: <span class="type">Study</span>)</span></span> &#123;</span><br><span class="line">    study.let &#123;</span><br><span class="line">        it.readBooks()</span><br><span class="line">        it.doHomework()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通常在判空时使用</p>
<h4 id="with">with</h4>
<p><code>with</code>函数接收两个参数，第一个参数是任意类型的对象，第二个参数是lambda表达式，在lambda表达式中会提供第一个参数的上下文，并用最后一行作为返回值。如现在一个水果列表，要依次吃水果:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> list = listOf(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Pear&quot;</span>, <span class="string">&quot;Grape&quot;</span>, <span class="string">&quot;Watermelon&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> builder = StringBuilder()</span><br><span class="line">builder.append(<span class="string">&quot;Start eating fruits.\n&quot;</span>)</span><br><span class="line"><span class="keyword">for</span>(fruit <span class="keyword">in</span> list) &#123;</span><br><span class="line">    builder.append(fruit).append(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> result = builder.toString()</span><br><span class="line">println(result)</span><br></pre></td></tr></table></figure>
<p>用<code>with</code>方法就可以改成:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> list = listOf(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Pear&quot;</span>, <span class="string">&quot;Grape&quot;</span>, <span class="string">&quot;Watermelon&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> result = with(StringBuilder()) &#123;</span><br><span class="line">    append(<span class="string">&quot;Start eating fruits.\n&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span>(fruit <span class="keyword">in</span> list) &#123;</span><br><span class="line">        append(fruit).append(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    toString()</span><br><span class="line">&#125;</span><br><span class="line">println(result)</span><br></pre></td></tr></table></figure>
<p>另外，还有个<code>run</code>函数和这个类似，只不过run函数是在某个对象的基础上使用，同样接受lambda表达式，其他则是一样的，最后一行返回值:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> result = obj.run &#123;</span><br><span class="line">    <span class="comment">//上下文</span></span><br><span class="line">    <span class="string">&quot;value&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="apply">apply</h4>
<p>apply函数也很类似，只不过他不会返回一个值，而是自动返回调用对象本身:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">val resullt = obj.apply &#123;</span><br><span class="line">	//上下文</span><br><span class="line">&#125;</span><br><span class="line">// result == obj</span><br></pre></td></tr></table></figure>
<p>比如$\texttt{SharedPreference}$中就可以使用apply简洁的添加数据。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Kotlin</tag>
      </tags>
  </entry>
</search>
