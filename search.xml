<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>[dp+bitset]数的种类</title>
    <url>/2024/11/30/dp-bitset-%E6%95%B0%E7%9A%84%E7%A7%8D%E7%B1%BB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="题目大意">题目大意</h2>
<p>给定$n(n\le5\times10^{3})$个整数，问由这些整数通过“加法”操作，可以组成多少种数字？<br>
其中，对于每个数$a_i$,$1\le a_{i}\le100$</p>
<h2 id="初步思路">初步思路</h2>
<p>首先，暴力<code>dfs</code>肯定是不能通过的，我们可以考虑用存在性dp来解决。</p>
<blockquote>
<p>存在性dp，即我们只需考虑这个状态是否能够实现，即用0/1来代替。</p>
</blockquote>
<p>先考虑最基本的，我们假设$dp[i][j]$为到第$a_i$个数位置能否组成$j$。然后考虑转移方程，首先$dp[i-1][j]$为$1$的情况那么$dp[i][j]$肯定能达到，在当前基础上$j+a_i$的数值也能达到。</p>
<p>例如:$i-1$之前可以组成$1,2,3$,$a_i=2$，则对于$i$之前，$3,4,5$一定也可以达到。因此，我们借助倒推回去的思想可以得到状态转移方程:<br>
$$dp[i][j]=(dp[i-1][j-a_i]|dp[i][j])$$<br>
之所以要用或运算，是因为这两个状态只要其中一个为$1$就可以了，而或运算则正好适用于这个情况。<br>
而这时候的空间复杂度为$5\times10^{3}\times5\times10^{3}\times100$，显然是过不了的</p>
<h2 id="进一步思考">进一步思考</h2>
<p>对于到$a_i$这一维度，其实是可以直接省掉的，以此来节省空间，但是对于时间复杂度来说，依然是过不了的。接下来，我们就可以用到$\texttt{bitset}$这个东西了。<br>
$\texttt{bitset}$可以当作有很多二进制的集合，只支持位运算，而不支持加减乘除，支持随机访问。</p>
<h3 id="texttt-bitset-常用函数">$\texttt{bitset}$常用函数</h3>
<ol>
<li><code>.count()</code>统计1的数量</li>
<li><code>.reset()</code>全部重置为0<br>
以上的时间复杂度均为$O(n)$</li>
</ol>
<h3 id="解题">解题</h3>
<p>假设从左到右分别代表$…,3,2,1,0$能否组成，当前状态$\texttt{s}$为$11$,$a_i=1$,只需要将当前状态先左移1位变成$110$,再或起来变成$111$即代表能组成$2,1,0$($\texttt{Tips:}$从右往左为低位到高位)。显然达到了我们的需求，假如$a_i=5$,只需要左移5位再或起来即可。<br>
因此，我们可以得到转移方程:<br>
$$dp=dp|(dp&lt;&lt;a_i)$$<br>
其中$\texttt{dp}$用$\texttt{bitset}$表示,故代码如下:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e3</span> + <span class="number">5</span>,M = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,a[N];</span><br><span class="line">bitset&lt;M&gt; bs;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)cin &gt;&gt; a[i];</span><br><span class="line">    bs[<span class="number">0</span>] = <span class="number">1</span>; <span class="comment">//初始化代表可以表示0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        bs |= (bs &lt;&lt; a[i]);<span class="comment">//状态转移</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; bs.<span class="built_in">count</span>();<span class="comment">//统计1的个数即为答案</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>dp</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>搜索专题</title>
    <url>/2024/11/15/%E6%90%9C%E7%B4%A2%E4%B8%93%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1>搜索</h1>
<p>搜索，常常适用于当我们想不出题目正解时所采取所谓的<s>骗分</s>方法，因为题目很大部分搜索是会过不了$100\%$样例的,但是由于搜索的思维简单和暴力性，我们往往可以较为轻松的骗到很大一部分分数。</p>
<h2 id="dfs-深度优先搜索">dfs(深度优先搜索)</h2>
<blockquote>
<p>DFS 全称是 Depth First Search，中文名是深度优先搜索，是一种用于遍历或搜索树或图的算法。所谓深度优先，就是说每次都尝试向更深的节点走。<br>
该算法讲解时常常与 BFS 并列，但两者除了都能遍历图的连通块以外，用途完全不同，很少有能混用两种算法的情况。<br>
DFS 常常用来指代用递归函数实现的搜索，但实际上两者并不一样。</p>
</blockquote>
<p>顾名思义，深度优先搜索就是要我们一层一层的去遍历访问，进行决策直到达到临界条件。<br>
dfs代码和递归类似，但是其思想不一样</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">#模板</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x == 临界条件)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(条件)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">dfs</span>(x + <span class="number">1</span>);<span class="comment">//下一步</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>例题:<a href="https://www.luogu.com.cn/problem/P1706">[luoguP1706]全排列问题</a></strong><br>
思路:从第一个位开始讨论遍历,对于每一位，for循环探讨每一个数字，如果这个数字没被之前几位用过那么我们就将他作为这一位的答案</p>
<div class="note info simple"><p>info 注意，这里需要用到回溯的思想，即这一种情况全部讨论完当需要讨论下一种情况时，需将当前标记过的状态还原，代码实现也非常简单。</p>
</div>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">#参考代码</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,vis[<span class="number">11</span>],ans[<span class="number">11</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(k&gt;n)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,ans[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		cout&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(vis[i]==<span class="number">0</span>)&#123;</span><br><span class="line">			vis[i]=<span class="number">1</span>; <span class="comment">//标记已经用过</span></span><br><span class="line">			ans[k]=i; <span class="comment">//加入答案</span></span><br><span class="line">			<span class="built_in">dfs</span>(k<span class="number">+1</span>); <span class="comment">//遍历下一位</span></span><br><span class="line">			vis[i]=<span class="number">0</span>; <span class="comment">//回溯思想</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>); <span class="comment">//遍历第一位</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>练习题</strong>:<a href="https://www.luogu.com.cn/problem/P1219">[luoguP1219]八皇后</a> -&gt; 也是dfs加回溯的思想</p>
]]></content>
      <categories>
        <category>专题</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>【Codeforces 312 div2 A】Lala Land and Apple Trees</title>
    <url>/2024/11/14/%E3%80%90Codeforces-312-div2-A%E3%80%91Lala-Land-and-Apple-Trees/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1><a href="https://www.luogu.com.cn/problem/CF558A">【Codeforces #312 div2 A】Lala Land and Apple Trees</a></h1>
<hr>
<p>首先，此题的大意是在一条坐标轴上，有$n$个点，每个点的权值为$a_{i}$,第一次从原点开始走，方向自选(&lt;- or -&gt;)，在过程中，若遇到一个权值&gt;0的点，则将此权值计入答案，并归零。当次、此方向上的所有点均为0后，输出此时的答案。<br>
然后，进行分析:<br>
我们很容易想到这是一个<strong>贪心</strong>，我们将正的和负的分别存入两个数组，最初的方向为: $zhengsum &gt; fusum ? zheng : fu$即正负两边那边权值 &gt; 0的点多就先往哪个方向走，然后，就成模拟题了……<br>
<em>Code</em>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">100001</span>;</span><br><span class="line"><span class="type">int</span> n,dir,l[M],r[M],lsum,rsum,ans;</span><br><span class="line"><span class="type">int</span> markjia[M] = &#123;<span class="number">0</span>&#125;,markjian[M] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">check</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dir == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100000</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(markjian[i])<span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100000</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(markjia[i])<span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="type">int</span> x,a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;x,&amp;a);</span><br><span class="line">        <span class="keyword">if</span>(x &lt; <span class="number">0</span>)&#123;x *= <span class="number">-1</span>;l[x] = a,markjian[x] = <span class="number">1</span>,lsum++;&#125;</span><br><span class="line">        <span class="keyword">else</span> r[x] = a,markjia[x] = <span class="number">1</span>,rsum++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(lsum &gt;= rsum)dir = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> dir = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>() == <span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(dir == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans += l[<span class="built_in">check</span>()];</span><br><span class="line">            markjian[<span class="built_in">check</span>()] = <span class="number">0</span>;</span><br><span class="line">            dir = <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            ans += r[<span class="built_in">check</span>()];</span><br><span class="line">            markjia[<span class="built_in">check</span>()] = <span class="number">0</span>;</span><br><span class="line">            dir = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>$End.$</p>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Toolbar+DrawerLayout+BottomNavigationView的使用</title>
    <url>/2025/02/10/Toolbar-DrawerLayout-BottomNavigationView%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Toolbar">Toolbar</h2>
<p>Toolbar相比于自带的标题栏，能有更多的扩展性，更为灵活。</p>
<p>现在<code>res/themes/themes.xml</code>中，把自带的标题栏关闭掉:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;Theme.MaterialDemo&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;Theme.MaterialComponents.Light.NoActionBar&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后在activity_main.xml里面设置布局:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.coordinatorlayout.widget.CoordinatorLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/main&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.view.activity.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">androidx.appcompat.widget.Toolbar</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/toolbar&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;?attr/actionBarSize&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;?attr/colorPrimary&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:theme</span>=<span class="string">&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:popupTheme</span>=<span class="string">&quot;@style/ThemeOverlay.AppCompat.Light&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_scrollFlags</span>=<span class="string">&quot;scroll|enterAlways|snap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">androidx.appcompat.widget.Toolbar</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">&quot;@layout/drawer_layout&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.coordinatorlayout.widget.CoordinatorLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中<code>coordinatorlayout</code>相当于一个加强版的FrameLayout，<code>&lt;include layout=&quot;@layout/drawer_layout&quot;/&gt;</code>是在下面引入我们的一个drawerLayout的布局，使用<code>&lt;include layout=&quot;&quot;/&gt;可以直接引入布局并且可以直接绑定控件</code>。</p>
<p>然后在<code>MainActivity.kt</code>中:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> toolbar: Toolbar = findViewById(R.id.toolbar)</span><br><span class="line">toolbar.title = <span class="string">&quot;玩Android&quot;</span> <span class="comment">//设置吧toolbar的标题</span></span><br><span class="line">toolbar.setTitleTextColor(Color.WHITE) <span class="comment">//设置标题字体颜色</span></span><br><span class="line">setSupportActionBar(toolbar) <span class="comment">//加载toolbar</span></span><br></pre></td></tr></table></figure>
<p>就完成了对toolbar的设置。</p>
<h2 id="DrawerLayout-NavigationView">DrawerLayout+NavigationView</h2>
<p><code>DrawerLayout</code>本身就是一种抽屉式布局，我们通常会搭配着<code>NavigationBottom</code>使用，然后抽屉栏里面的布局可以用<code>NavigationView</code>这个自带的布局，可以很容易实现头像加列表的形式，效果如下:</p>
<p><img src="https://s3.bmp.ovh/imgs/2025/02/10/8a4a496525517f7f.png" alt=""></p>
<p><code>drawer_layout.xml</code>布局如下:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.drawerlayout.widget.DrawerLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/drawerLayout&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 这里是DrawerLayout外面的布局，即主页面 --&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">&quot;@layout/homepage&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 下面的就是DrawerLayout里面的布局 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.google.android.material.navigation.NavigationView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/nav_view&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;start&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fitsSystemWindows</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:headerLayout</span>=<span class="string">&quot;@layout/nav_header_main&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:menu</span>=<span class="string">&quot;@menu/activity_main_drawer&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.drawerlayout.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面代码中<code>android:layout_gravity=&quot;start&quot;</code>这一行是必须指定的，且要与<code>DrawerLayout</code>的打开方式一样</p>
<p>其中列表使用的是menu资源，<code>activity_main_drawer.xml</code>内容如下:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:showIn</span>=<span class="string">&quot;navigation_view&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">group</span> <span class="attr">android:checkableBehavior</span>=<span class="string">&quot;single&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/nav_about&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:icon</span>=<span class="string">&quot;@drawable/ic_about&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">&quot;关于&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>MainActivity.kt</code>里面的设置:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">setNavigationColumn</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> drawerLayout: DrawerLayout = findViewById(R.id.drawerLayout)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//对toolbar的设置</span></span><br><span class="line">    <span class="keyword">val</span> toolbar: Toolbar = findViewById(R.id.toolbar)</span><br><span class="line">    toolbar.title = <span class="string">&quot;玩Android&quot;</span></span><br><span class="line">    toolbar.setTitleTextColor(Color.WHITE)</span><br><span class="line">    setSupportActionBar(toolbar)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//加载打开抽屉栏的按钮</span></span><br><span class="line">    supportActionBar?.let &#123;</span><br><span class="line">        it.setDisplayHomeAsUpEnabled(<span class="literal">true</span>) <span class="comment">//按钮可以让用户返回到上一级的活动或片段</span></span><br><span class="line">        it.setHomeAsUpIndicator(R.drawable.ic_menu) <span class="comment">//将返回按钮设置成菜单图标</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//关闭抽屉栏</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">closeDrawer</span><span class="params">()</span></span> &#123;</span><br><span class="line">        drawerLayout.closeDrawer(findViewById(R.id.nav_view))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对抽屉栏里面的列表进行点击监听</span></span><br><span class="line">    findViewById&lt;NavigationView&gt;(R.id.nav_view).setNavigationItemSelectedListener &#123; menuItem -&gt;</span><br><span class="line">        <span class="keyword">when</span> (menuItem.itemId) &#123;</span><br><span class="line"></span><br><span class="line">            R.id.nav_about -&gt; &#123;</span><br><span class="line">                <span class="keyword">val</span> intent = Intent(<span class="keyword">this</span>, AboutActivity::<span class="keyword">class</span>.java)</span><br><span class="line">                startActivity(intent)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        closeDrawer()</span><br><span class="line">        <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//添加对DrawerLayout的监听，使得在打开与关闭时toolbar能切换不同的图标</span></span><br><span class="line">    toggle = <span class="keyword">object</span> :</span><br><span class="line">        ActionBarDrawerToggle(<span class="keyword">this</span>, drawerLayout, R.string.app_name, R.string.app_name) &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDrawerClosed</span><span class="params">(drawerView: <span class="type">View</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.onDrawerClosed(drawerView)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDrawerOpened</span><span class="params">(drawerView: <span class="type">View</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.onDrawerOpened(drawerView)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    toggle.syncState() <span class="comment">//同步toolbar和DrawerLayout的状态</span></span><br><span class="line">    drawerLayout.addDrawerListener(toggle)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="BottomNavigationView-ViewPager2">BottomNavigationView+ViewPager2</h2>
<p>而homepage页面我们则采用<code>BottomNavigationView+ViewPager2</code>的形式。</p>
<p><code>homepage.xml</code>:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.google.android.material.bottomnavigation.BottomNavigationView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/homepage_navigation_bottom&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:itemTextColor</span>=<span class="string">&quot;@color/nav_bottom_text_select&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:labelVisibilityMode</span>=<span class="string">&quot;labeled&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:menu</span>=<span class="string">&quot;@menu/menu_bottom&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.viewpager2.widget.ViewPager2</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/bottom_navigation_viewpage2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toTopOf</span>=<span class="string">&quot;@+id/homepage_navigation_bottom&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">&quot;1.0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintVertical_bias</span>=<span class="string">&quot;0.0&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面的<code>@menu/menu_bottom</code>也是菜单资源文件，加载了底部导航按钮:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/bottom_home&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;@drawable/bottom_home&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">&quot;首页&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/bottom_public&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;@drawable/bottom_public&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">&quot;公众号&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/bottom_navigation&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;@drawable/bottom_navigation&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">&quot;导航&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>ViewPager2的Adapter</code>:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.generlas.winterexam.view.adapter</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.fragment.app.Fragment</span><br><span class="line"><span class="keyword">import</span> androidx.fragment.app.FragmentActivity</span><br><span class="line"><span class="keyword">import</span> androidx.viewpager2.adapter.FragmentStateAdapter</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ViewPager2Adapter</span>(fragment: FragmentActivity, <span class="keyword">private</span> <span class="keyword">val</span> list: MutableList&lt;Fragment&gt;) :</span><br><span class="line">    FragmentStateAdapter(fragment) &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getItemCount</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.size</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">createFragment</span><span class="params">(position: <span class="type">Int</span>)</span></span>: Fragment &#123;</span><br><span class="line">        <span class="keyword">return</span> list[position]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为切换的是fragment，所以直接继承<code>FragmentStateAdapter</code>。</p>
<p><code>MainActivity.kt</code>：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置底部导航按钮</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">setBottomNavigation</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//绑定视图</span></span><br><span class="line">        <span class="keyword">val</span> mNavBottom: BottomNavigationView = findViewById(R.id.homepage_navigation_bottom)</span><br><span class="line">        <span class="keyword">val</span> mBottomViewpager2: ViewPager2 = findViewById(R.id.bottom_navigation_viewpage2)</span><br><span class="line"></span><br><span class="line">        mNavBottom.itemIconTintList = <span class="literal">null</span> <span class="comment">//取消导航栏的默认颜色</span></span><br><span class="line">        <span class="comment">//将fragment添加进适配器</span></span><br><span class="line">        <span class="keyword">val</span> fragmentList: MutableList&lt;Fragment&gt; = ArrayList()</span><br><span class="line">        fragmentList.add(HomeFragment())</span><br><span class="line">        fragmentList.add(PublicFragment())</span><br><span class="line">        fragmentList.add(NavigationFragment())</span><br><span class="line">        mBottomViewpager2.adapter = ViewPager2Adapter(<span class="keyword">this</span>, fragmentList)</span><br><span class="line"></span><br><span class="line">        mBottomViewpager2.isUserInputEnabled = <span class="literal">false</span> <span class="comment">//禁用ViewPager2的手势滑动</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//fragment切换时底部导航跟着切换</span></span><br><span class="line">        mBottomViewpager2.registerOnPageChangeCallback(<span class="keyword">object</span> : ViewPager2.OnPageChangeCallback() &#123;</span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onPageSelected</span><span class="params">(position: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">                <span class="keyword">super</span>.onPageSelected(position)</span><br><span class="line">                mNavBottom.menu.getItem(position).isChecked = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//底部导航切换时fragment跟着切换</span></span><br><span class="line">        mNavBottom.setOnItemSelectedListener &#123; item -&gt;</span><br><span class="line">            <span class="keyword">when</span> (item.itemId) &#123;</span><br><span class="line">                R.id.bottom_home -&gt; &#123;</span><br><span class="line">                    mBottomViewpager2.currentItem = <span class="number">0</span></span><br><span class="line">                    <span class="keyword">return</span><span class="symbol">@setOnItemSelectedListener</span> <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                R.id.bottom_public -&gt; &#123;</span><br><span class="line">                    mBottomViewpager2.currentItem = <span class="number">1</span></span><br><span class="line">                    <span class="keyword">return</span><span class="symbol">@setOnItemSelectedListener</span> <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                R.id.bottom_navigation -&gt; &#123;</span><br><span class="line">                    mBottomViewpager2.currentItem = <span class="number">2</span></span><br><span class="line">                    <span class="keyword">return</span><span class="symbol">@setOnItemSelectedListener</span> <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="自定义toolbar的菜单图标">自定义toolbar的菜单图标</h2>
<p><img src="https://img.z4a.net/images/2025/02/10/1.png" alt=""></p>
<p>如上图所示，toolbar能自定义添加按钮(如搜索按钮)</p>
<p>只需要在<code>MainActivity.kt</code>中添加:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 处理toolbar上抽屉开关等图标的点击事件</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onOptionsItemSelected</span><span class="params">(item: <span class="type">MenuItem</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置抽屉栏按钮的点击</span></span><br><span class="line">    <span class="keyword">if</span> (toggle.onOptionsItemSelected(item)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">when</span> (item.itemId) &#123;</span><br><span class="line">        R.id.search -&gt; &#123;</span><br><span class="line">            <span class="keyword">val</span> intent = Intent(<span class="keyword">this</span>, SearchActivity::<span class="keyword">class</span>.java)</span><br><span class="line">            startActivity(intent)</span><br><span class="line">            <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> -&gt; <span class="keyword">super</span>.onOptionsItemSelected(item)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加载toolbar的搜索按钮</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateOptionsMenu</span><span class="params">(menu: <span class="type">Menu</span>?)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    menuInflater.inflate(R.menu.menu_toolbar_main, menu)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同样也需要添加目录资源<code>menu_toolbar_main.xml</code>:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/search&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;@drawable/ic_search&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">&quot;search&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:showAsAction</span>=<span class="string">&quot;always&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>通过上述方法，你就可以很容易搭建起一个基本的页面框架了。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Kotlin</tag>
      </tags>
  </entry>
</search>
